name: Create Environment

permissions:
  id-token: write
  contents: read

on:
  create:
  pull_request:
    types: [opened, reopened]

concurrency: ${{ github.event.number || github.ref_name }}

jobs:
  config:
    if: github.event_name == 'pull_request' || github.event.ref_type == 'branch'
    name: Get Configuration
    uses: ./.github/workflows/environment_config.yml

  create_env:
    if: github.event_name == 'pull_request' || github.event.ref_type == 'branch'
    name: Create ${{ needs.config.outputs.type }} Environment
    runs-on: ubuntu-latest

    needs: config
    environment: ${{ needs.config.outputs.type }}

    env:
      ENVIRONMENT_NAME: ${{ needs.config.outputs.name }}
      ENVIRONMENT_TYPE: ${{ needs.config.outputs.type }}

    steps:
      - uses: actions/checkout@v3

      # - name: Build ADE.Tutorial
      #   run: dotnet publish ./ADE.Tutorial -c Release -o ./publish && (cd ./publish && zip -r ../publish.zip .)

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          cd src
          npm install
          npx prisma generate

      - name: Build application
        run: |
          cd src
          npm run build

      - name: Run Prisma Migrations
        run: |
          cd src
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}

      - name: Install DevCenter CLI Extension
        run: az extension add --name devcenter --upgrade

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ vars.ACR_NAME }} --username ${{ secrets.AZURE_ACR_USERNAME }} --password ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Build and push container image to registry
        run: |
          cd src
          echo "FROM node:18
          WORKDIR /app
          COPY package*.json ./
          RUN npm install
          COPY . .
          RUN npx prisma generate
          RUN npm run build
          EXPOSE 3000
          CMD [\"npm\", \"run\", \"start:prod\"]" > Dockerfile
          docker build --platform linux/amd64 -t ${{ vars.ACR_NAME }}.azurecr.io/ribpay-nestjs-api:${{ needs.config.outputs.type }} .
          docker push ${{ vars.ACR_NAME }}.azurecr.io/ribpay-nestjs-api:${{ needs.config.outputs.type }}

      # - name: Create Environment
      #   run: |
      #     az devcenter dev environment create \
      #         --name ${{ env.ENVIRONMENT_NAME }} --environment-type ${{ env.ENVIRONMENT_TYPE }} \
      #         --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
      #         --catalog-name ${{ vars.AZURE_CATALOG }} --environment-definition-name ${{ vars.AZURE_CATALOG_ITEM }} \
      #         --parameters '{
      #             "name": "${{ env.ENVIRONMENT_NAME }}",
      #             "containerImage": "${{ secrets.ACR_NAME }}.azurecr.io/ribpay-nestjs-api:${{ needs.config.outputs.type }}"
      #         }' --only-show-errors

      # - name: Get Resource Group
      #   shell: bash {0}
      #   run: |
      #     environment_rg=$(az devcenter dev environment show --name ${{ env.ENVIRONMENT_NAME }} \
      #         --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
      #         --only-show-errors --query resourceGroupId --output tsv 2>&1)

      #     if [ $? -ne 0 ]; then
      #         echo "::error::az devcenter dev environment show command failed: $environment_rg"; exit 1
      #     fi

      #     environment_group=${environment_rg##*/}
      #     environment_sub=${environment_rg%/resourceGroups*}
      #     environment_sub=${environment_sub##*/}

      #     echo "ENVIRONMENT_GROUP=$environment_group" >> $GITHUB_ENV
      #     echo "ENVIRONMENT_SUB=$environment_sub" >> $GITHUB_ENV

      #     echo "- [View environment resources in the Azure portal](https://portal.azure.com/#@${{ vars.AZURE_TENANT_ID }}/resource$environment_rg)" >> $GITHUB_STEP_SUMMARY

      # - name: Deploy ADE.Tutorial
      #   run: |
      #     az functionapp deployment source config-zip --name ${{ env.ENVIRONMENT_NAME }} --src publish.zip \
      #         --subscription ${{ env.ENVIRONMENT_SUB }} --resource-group ${{ env.ENVIRONMENT_GROUP }}

      #     echo "- [View the deployed API](https://${{ env.ENVIRONMENT_NAME }}.azurewebsites.net/api/time)" >> $GITHUB_STEP_SUMMARY

      - name: Verify Resource Group Exists
        run: |
          az group show --name ${{ env.RESOURCE_GROUP }} --output table

      - name: Create Container App Environment
        run: |
          az containerapp env create \
            --name ribpay-api-deployment-demo-env \
            --resource-group ${{ env.ENVIRONMENT_GROUP }} \
            --location ${{ vars.AZURE_LOCATION }}

      - name: Deploy Container App
        run: |
          az containerapp create \
            --name ${{ env.ENVIRONMENT_NAME }} \
            --resource-group ${{ env.ENVIRONMENT_GROUP }} \
            --environment ${{ env.ENVIRONMENT_NAME }}-env \
            --image ${{ vars.ACR_NAME }}.azurecr.io/ribpay-nestjs-api:${{ needs.config.outputs.type }} \
            --target-port 3000 \
            --ingress 'external' \
            --registry-server ${{ vars.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.AZURE_ACR_USERNAME }} \
            --registry-password ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Output deployment information
        run: |
          echo "- [View the deployed API](https://${{ env.ENVIRONMENT_NAME }}.azurecontainerapps.io)" >> $GITHUB_STEP_SUMMARY
